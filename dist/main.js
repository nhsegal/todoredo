(()=>{"use strict";const e=function(e,t,a,n=null){const o=Math.floor(1e8*Math.random());let d=new Date(e);return d.setHours(0,0,0,0),{date:d,content:t,isCompleted:!1,priority:a,project:n,id:o}},t=(e,t)=>{const a=e.date-t.date;return 0!==a?a:e.priority!==t.priority?"normal"===e.priority?1:-1:e.content.localeCompare(t.content)},a=function(){const e=[],a=()=>{e.sort(t)};return{data:e,displayedList:[],editTask:(t,a,n)=>{for(let o=0;o<e.length;o++)if(e[o].id==t.id)return void(e[o][a]=n);console.log("I couldn't find that task!")},sortByDate:a,produceTasksInAProject:t=>{let a=e.filter((e=>e.project===t));return a},getListOfProjects:()=>{const t=[];return e.forEach((e=>{null==e.project||""===e.project||t.some((t=>t===e.project))||t.push(e.project)})),t},removeTask:t=>{e.splice(e.indexOf(t),1)},addTask:t=>{e.push(t),a()}}}(),n={main:document.querySelector("main"),body:document.querySelector("body"),sideBar:document.querySelector("#sidebar"),todaysTasksSideBar:document.querySelector("#todays-tasks"),thisWeekSideBar:document.querySelector("#this-week"),allTasksSideBar:document.querySelector("#all-tasks"),get addTaskBtn(){return document.querySelector("#add-a-task")},get addTaskForm(){return document.querySelector("#task-form")},get addTaskModal(){return document.querySelector("#add-a-task-modal")},get closeModalButton(){return document.querySelector("#close-modal-button")},get newTaskContent(){return document.querySelector("#task-content")},get newTaskDate(){return document.querySelector("#date")},get newTaskPriority(){return[...document.querySelectorAll("input[name=priority]")]},get newTaskProject(){return document.querySelector("#project")},get cardEditBtns(){return[...document.querySelectorAll(".edit-task")]},get cardRemoveBtns(){return[...document.querySelectorAll(".remove-task")]},get cardCheckBoxs(){return[...document.querySelectorAll('[name="isCompletedCheckbox"]')]},get listByProject(){return document.querySelector("#list-by-project")},get sidebarProjectList(){const e=document.getElementById("list-by-project").children,t=[];for(const a of e)t.push(a.firstChild);return t},get sidebarProjectListRemoveBtns(){const e=document.getElementById("list-by-project").children,t=[];for(const a of e)t.push(a.lastChild);return t}};function o(e){const t=document.createElement("input");t.type="checkbox",t.name="isCompletedCheckbox",t.setAttribute("data-id",e.id),t.checked=e.isCompleted,t.id=e.content;const a=document.createElement("div");a.classList.add("task-name"),a.setAttribute("data-id",e.id),a.textContent=e.content;const n=document.createElement("div");n.classList.add("task-due-date"),n.setAttribute("data-id",e.id),n.textContent=`Due: ${e.date.toLocaleString("default",{weekday:"short"})},\n        ${e.date.toLocaleString("default",{month:"short"})}. \n        ${e.date.getDate()} `;const o=document.createElement("button");o.classList.add("edit-task"),o.classList.add("material-icons"),o.setAttribute("data-id",e.id),o.textContent="edit";const d=document.createElement("button");d.classList.add("remove-task"),d.classList.add("material-icons"),d.setAttribute("data-id",e.id),d.textContent="delete";const s=document.createElement("div");return s.classList.add("card"),s.setAttribute("data-id",e.id),"high"===e.priority&&s.classList.add("important"),s.append(t,a,n,o,d),t.checked?t.parentElement.classList.add("is-completed"):t.parentElement.classList.contains("is-completed")&&t.parentElement.classList.remove("is-completed"),s}function d(e,t,a=null){const d=new Date;d.setHours(0,0,0,0);const s=new Date(d);s.setDate(s.getDate()+1);const i=new Date(d);i.setDate(d.getDate()+7);let c=null,r=null,l=null;for(;n.main.firstChild;)n.main.removeChild(n.main.firstChild),e.displayedList.splice(0,e.displayedList.length);if("byProject"===t){const t=e.produceTasksInAProject(a),s=document.createElement("div");s.classList.add("heading"),s.textContent=a,n.main.append(s);for(let a=0;a<t.length;a++){if(t[a].date>=d&&t[a].date<=d&&null==c){c=1;const e=document.createElement("div");e.classList.add("subheading"),e.textContent="Today",n.main.append(e)}if(t[a].date>d&&1===c){c=null;const e=document.createElement("hr");n.main.append(e)}n.main.append(o(t[a])),e.displayedList.push(t[a])}}else for(let a=0;a<e.data.length;a++){if(e.data[a].date>=s&&"today"===t)return;if(e.data[a].date>i&&"this-week"===t)return;if(e.data[a].date<d&&null==r&&!1===e.data[a].isCompleted){r=1;const e=document.createElement("div");e.classList.add("heading"),e.textContent="Past Due",n.main.append(e)}if(e.data[a].date>=d&&1===r){r=2;const e=document.createElement("hr");n.main.append(e)}if(e.data[a].date>=d&&e.data[a].date<s&&null==c){c=1;const e=document.createElement("div");e.classList.add("heading"),e.textContent="Today",n.main.append(e)}if(e.data[a].date>=s&&1==c){c=2;const e=document.createElement("hr");n.main.append(e)}if(e.data[a].date<=i&&e.data[a].date>=s&&null==l){l=1;const e=document.createElement("div");e.classList.add("heading"),e.textContent="This Week",n.main.append(e)}if(e.data[a].date>i&&1===l){l=2;const e=document.createElement("hr");n.main.append(e)}(!1===e.data[a].isCompleted&&e.data[a].date<d||e.data[a].date>=d)&&(n.main.append(o(e.data[a])),e.displayedList.push(e.data[a]))}}function s(e){for(;n.sidebarProjectList.length;)n.listByProject.removeChild(n.listByProject.lastChild);e&&e.forEach((e=>{!function(e){const t=document.createElement("li"),a=document.createElement("a");a.id=e,a.href="#",a.textContent=e;const o=document.createElement("a");o.id=`${e}Remove`,o.href="#",o.classList.add("material-icons"),o.textContent="delete",t.append(a,o),n.listByProject.append(t)}(e)}))}const i={viewBy:"all",whichProject:null,update(e,t=null){this.viewBy=e,this.whichProject=t}};let c=!1,r=null;function l(e){document.querySelector(`[data-id="${e.id}"] input`).addEventListener("change",(function(e){r=e.target.getAttribute("data-id");const t=a.data.filter((e=>e.id==r))[0];this.checked?(t.isCompleted=!0,e.target.parentElement.classList.add("is-completed"),a.editTask(t,"isCompleted",!0)):(t.isCompleted=!1,e.target.parentElement.classList.remove("is-completed"))})),document.querySelectorAll(`[data-id="${e.id}"] button`)[0].addEventListener("click",(t=>{c=!0,r=t.target.parentElement.getAttribute("data-id");const o=a.data.filter((e=>e.id==r))[0],d=o.date.getFullYear(),s=o.date.getMonth()+1,i=o.date.getDate();let l=String(1e4*d+100*s+i);l=`${l.slice(0,4)}-${l.slice(4,6)}-${l.slice(6,8)}`,n.newTaskContent.value=o.content,n.newTaskDate.value=l,n.newTaskProject.value=o.project;for(const t of n.newTaskPriority)t.value===e.priority&&(t.checked=!0);n.addTaskModal.classList.toggle("closed")})),document.querySelectorAll(`[data-id="${e.id}"] button`)[1].addEventListener("click",(e=>{r=e.target.parentElement.getAttribute("data-id");const t=a.data.filter((e=>e.id==r))[0];a.removeTask(t),localStorage.setItem("oldData",JSON.stringify(a.data)),a.displayedList.splice(a.displayedList.indexOf(t),1),localStorage.setItem("oldDisplayList",JSON.stringify(a.displayedList)),d(a,i.viewBy,i.whichProject),u()}))}function u(){for(const e of a.displayedList)l(e)}function m(){try{n.todaysTasksSideBar.addEventListener("click",(()=>{i.update("today",null),d(a,i.viewBy,i.whichProject),u()})),n.thisWeekSideBar.addEventListener("click",(()=>{i.update("this-week",null),d(a,i.viewBy,i.whichProject),u()})),n.allTasksSideBar.addEventListener("click",(()=>{i.update("all",null),d(a,i.viewBy,i.whichProject),u()}))}catch{console.log("failed to add today/week/all ELs")}}function p(){const e=function(e){confirm("Delete this project and all tasks in it?")?(a.produceProjectList(e.target.previousElementSibling.id).forEach((e=>a.removeTask(e))),localStorage.setItem("oldData",JSON.stringify(a.data)),localStorage.setItem("oldDisplayList",JSON.stringify(a.displayedList)),d(a,n.main,i.viewBy,i.whichProject),console.log(a.getListOfProjects()),s(a.getListOfProjects()),p(),u(),console.log(a.getListOfProjects())):console.log("You pressed Cancel!")};try{for(const e of n.sidebarProjectList){const t=e;t.addEventListener("click",(()=>{i.update("byProject",t.id),d(a,i.viewBy,i.whichProject),u()}))}for(const t of n.sidebarProjectListRemoveBtns){const n=t;n.addEventListener("click",(t=>{"byProject"===i.viewBy&&i.whichProject===n.previousElementSibling.id&&i.update("all"),e(t),d(a,i.viewBy,i.whichProject),u(),s(a.getListOfProjects()),p()}))}}catch{console.log("failed to add ELs to projects")}}!function(){const t=new Date;t.setHours(0,0,0,0);const o=new Date(t);o.setDate(t.getDate()-1);const l=new Date(t);l.setDate(t.getDate()+1),new Date(t).setDate(t.getDate()+2);const h=new Date(t);h.setDate(t.getDate()+8);const y=e(t,"Refactor tic-tac-toe program","normal"),k=e(t,"Buy milk","high"),g=e(l,"Buy birthday card","normal"),f=e(l,"Call mom","high"),v=e(l,"Do Ruby beginner tutorial","normal"),E=e(o,"Vacuum","high"),L=e(h,"Paint the shed","high");a.data.push(y),a.data.push(k),a.data.push(g),a.data.push(f),a.data.push(v),a.data.push(E),a.data.push(L),a.editTask(y,"project","Coding"),a.editTask(k,"project","Shopping"),a.editTask(g,"project","Shopping"),a.editTask(v,"project","Coding"),a.editTask(E,"project","Housework"),a.editTask(L,"project","Housework"),a.sortByDate(),d(a,"today",null),function(e,t){const a=document.createElement("div");a.classList.add("modal"),a.classList.add("closed"),a.id="add-a-task-modal";const n=document.createElement("div");n.classList.add("modal-content");const o=document.createElement("form");o.id="task-form";const d=document.createElement("div");d.textContent=" ";const s=document.createElement("div");s.textContent=" ";const i=document.createElement("div");i.id="close-modal-button",i.innerHTML="&times";const c=document.createElement("div");c.textContent=" ";const r=document.createElement("label");r.for="task-content",r.textContent="Task:";const l=document.createElement("input");l.type="text",l.id="task-content",l.name="task-content",l.placeholder="Enter Task",l.required=!0;const u=document.createElement("div");u.textContent=" ";const m=document.createElement("label");m.for="date",m.textContent="Due:";const p=document.createElement("div");p.textContent=" ";const h=document.createElement("input");h.type="date",h.id="date",h.name="date",h.required=!0;const y=document.createElement("div");y.textContent=" ";const k=document.createElement("div");k.textContent="Priority:";const g=document.createElement("div");g.id="priority-options";const f=document.createElement("div"),v=document.createElement("input");v.type="radio",v.id="normal",v.name="priority",v.value="normal",v.required=!0;const E=document.createElement("label");E.for="normal",E.textContent="Normal";const L=document.createElement("div"),w=document.createElement("input");w.type="radio",w.id="high",w.name="priority",w.value="high",w.required=!0;const j=document.createElement("label");j.for="high",j.textContent="High";const T=document.createElement("label");T.for="project",T.textContent="Project:";const C=document.createElement("input");C.name="project",C.id="project",C.placeholder="Optional",C.setAttribute("list","project-list");const S=document.createElement("datalist");S.id="project-list";for(let e=0;e<t.length;e++){const a=document.createElement("option");a.value=t[e],a.textContent=t[e],S.append(a)}C.append(S);const P=document.createElement("button");P.type="submit",P.id="modal-submit",P.value="Submit",P.textContent="Submit",f.append(v,E),L.append(w,j),g.append(f,L),o.append(d,s,i,r,l,c,m,h,u,k,g,p,T,C,y,P),n.append(o),a.append(n),e.append(a)}(n.body,a.getListOfProjects()),s(a.getListOfProjects()),function(){n.addTaskBtn.addEventListener("click",(()=>{c=!1,n.addTaskModal.classList.toggle("closed")})),n.closeModalButton.addEventListener("click",(()=>{n.addTaskModal.classList.toggle("closed"),n.newTaskContent.value=null,n.newTaskDate.value=null;for(const e of n.newTaskPriority)e.checked=!1;n.newTaskProject.value=null})),n.addTaskForm.addEventListener("submit",(function(t){if(t.preventDefault(),n.addTaskModal.classList.toggle("closed"),c){const e=a.data.filter((e=>e.id==r))[0];a.editTask(e,"content",n.newTaskContent.value);let t=new Date(n.newTaskDate.value);t.setHours(0,0,0,0),a.editTask(e,"date",t);const o=Array.from(n.newTaskPriority).filter((e=>e.checked))[0];a.editTask(e,"priority",o.value),a.editTask(e,"project",n.newTaskProject.value),a.sortByDate(),localStorage.setItem("oldData",JSON.stringify(a.data)),localStorage.setItem("oldDisplayList",JSON.stringify(a.displayedList))}else{let t=null;n.newTaskPriority.forEach((e=>{e.checked&&(t=e.value)}));const o=e(n.newTaskDate.value,n.newTaskContent.value,t,n.newTaskProject.value);a.addTask(o),a.sortByDate(),localStorage.setItem("oldData",JSON.stringify(a.data)),localStorage.setItem("oldDisplayList",JSON.stringify(a.displayedList))}n.newTaskContent.value=null,n.newTaskDate.value=null;for(const e of n.newTaskPriority)e.checked=!1;n.newTaskProject.value=null,d(a,n.main,i.viewBy,i.whichProject),s(a.getListOfProjects()),p(),m(),u(),a.sortByDate()}));try{n.todaysTasksSideBar.addEventListener("click",(()=>{i.update("today",null),d(a,i.viewBy,i.whichProject),u()})),n.thisWeekSideBar.addEventListener("click",(()=>{i.update("this-week",null),d(a,i.viewBy,i.whichProject),u()})),n.allTasksSideBar.addEventListener("click",(()=>{i.update("all",null),d(a,i.viewBy,i.whichProject),u()}))}catch{console.log("failed to add event listeners")}}(),u(),m(),p()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,